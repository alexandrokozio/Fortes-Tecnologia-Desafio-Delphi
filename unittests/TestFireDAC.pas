unit TestFireDAC;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, model.connection.interfaces, Generics.Collections,
  Datasnap.DBClient, Data.DB, System.SysUtils,
  model.connection.factory, model.entity.combustiveis, mapping.attributes,
  model.entity.interfaces, model.controller.entity;

type
  // Test methods for class TCombustiveis
  TestFireDACTCombustiveis = class(TTestCase)
  strict private
    FCombustiveis: TCombustiveis;
    FController: IController;
    function GetRecordCount(const AWhere: array of string): Integer;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestOpenDataSetCombustiveis;
    procedure TestInsertCombustiveis;
    procedure TestUpdateCombustiveis;
    procedure TestDeleteCombustiveis;
  end;

implementation

function TestFireDACTCombustiveis.GetRecordCount(const AWhere: array of string): Integer;
var
  lDataSource: TDataSource;
begin
  lDataSource := TDataSource.Create(nil);
  try
    FController.Entities.Combustiveis.DataSet(lDataSource).Open(AWhere);
    Result := lDataSource.DataSet.RecordCount;
  finally
    FreeAndNil(lDataSource);
  end;
end;

procedure TestFireDACTCombustiveis.SetUp;
begin
  FCombustiveis := TCombustiveis.Create;
  FController := TController.New;
end;

procedure TestFireDACTCombustiveis.TearDown;
begin
  FCombustiveis.Free;
  FCombustiveis := nil;
end;

procedure TestFireDACTCombustiveis.TestDeleteCombustiveis;
var
  ReturnValue: Integer;
begin
  FController.Entities.Combustiveis.Delete(['Codigo=100']);
  ReturnValue := GetRecordCount(['Codigo=100']);

  CheckTrue(ReturnValue = 0, 'Não foi possível excluir Combustivel.');
end;

procedure TestFireDACTCombustiveis.TestInsertCombustiveis;
var
  ReturnValue: Integer;
  lColVal: array of string;
  lCol: array of string;
begin
  lCol := ['Codigo', 'Descricao', 'Tipo', 'Valor'];
  lColVal := ['100', QuotedStr('Etanol'), QuotedStr('Aditivado'), '8'];
  FController.Entities.Combustiveis.Insert(lCol, lColVal);
  ReturnValue := GetRecordCount(['Codigo=100']);

  CheckTrue(ReturnValue > 0, 'Não foi possível inserir Combustivel.');
end;

procedure TestFireDACTCombustiveis.TestOpenDataSetCombustiveis;
var
  lDataSource: TDataSource;
begin
  lDataSource := TDataSource.Create(nil);
  try
    FController.Entities.Combustiveis.DataSet(lDataSource).Open([]);
    CheckTrue(lDataSource.DataSet.Active,
      'Não foi possível obter Dataset de Combustivel.');
  finally
    FreeAndNil(lDataSource);
  end;
end;

procedure TestFireDACTCombustiveis.TestUpdateCombustiveis;
var
  ReturnValue: Integer;
  lColVal: array of string;
  lCol: array of string;
begin
  lCol := ['Codigo=100'];
  lColVal := ['Codigo=100', 'Descricao=''Etanol''', 'Tipo=''Comum''', 'Valor=6'];
  FController.Entities.Combustiveis.Update(lColVal, lCol);
  ReturnValue := GetRecordCount(['Descricao=''Etanol''', 'Tipo=''Comum''', 'Valor=6']);

  CheckTrue(ReturnValue > 0, 'Não foi possível alterar Combustivel.');
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestFireDACTCombustiveis.Suite);
end.

